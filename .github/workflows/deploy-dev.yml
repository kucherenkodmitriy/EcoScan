name: Deploy to Dev Environment

on:
  push:
    branches:
      - dev
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            lambda/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('lambda/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache AWS SAM
        uses: actions/cache@v4
        with:
          path: |
            ~/.aws-sam/
            .aws-sam/
          key: ${{ runner.os }}-sam-${{ hashFiles('template.yml') }}
          restore-keys: |
            ${{ runner.os }}-sam-

      - name: Cache system dependencies
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/bin/aws
            /usr/local/bin/docker-compose
            /usr/local/bin/sam
          key: ${{ runner.os }}-system-deps-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-system-deps-

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
          target: aarch64-unknown-linux-gnu
      
      - name: Install cargo-lambda
        if: steps.cache-cargo-lambda.outputs.cache-hit != 'true'
        run: |
          # Check if cargo-lambda is already installed
          if ! command -v cargo-lambda &> /dev/null; then
            cargo install cargo-lambda --version 0.22.0
          else
            echo "cargo-lambda is already installed"
          fi
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          cargo lambda --version

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.13.0
          
      - name: Show environment info
        run: |
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          echo "cargo-lambda version: $(cargo lambda --version || echo 'Not found')"
          echo "Zig version: $(zig version)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions
          role-duration-seconds: 3600

      - name: Install system dependencies
        if: steps.cache-system-deps.outputs.cache-hit != 'true'
        run: |
          if command -v apt-get >/dev/null 2>&1; then
            # Install required system packages
            sudo apt-get update && sudo apt-get install -y jq unzip less
            
            # Install AWS CLI v2
            curl "https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install --update
            rm -rf awscliv2.zip aws
            
            # Configure AWS CLI to not use a pager
            mkdir -p ~/.aws
            echo -e "[default]\ncli_pager=\"\"" > ~/.aws/config
            
            # Verify AWS CLI installation
            aws --version
            
            # Install Docker Compose for SAM Local
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            # Verify Docker Compose installation
            docker-compose --version
          elif command -v apk >/dev/null 2>&1; then
            apk add --no-cache jq
          fi

      - name: Install AWS SAM CLI
        if: steps.cache-sam.outputs.cache-hit != 'true'
        run: |
          curl -L "https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip" -o "sam.zip"
          unzip sam.zip -d sam-installation
          sudo ./sam-installation/install
          sam --version
          
      - name: Deploy to AWS
        run: |
          # Build Lambda function
          cd lambda
          cargo build --release
          
          # Deploy API Gateway and related resources
          cd ../infrastructure/api
          chmod +x deploy.sh
          ./deploy.sh --environment dev --rate-limit 10 --burst-limit 5

          # Get stack outputs
          STACK_OUTPUTS=$(aws cloudformation describe-stacks \
            --stack-name ecoscan-api-dev \
            --query 'Stacks[0].Outputs' \
            --region eu-central-1 \
            --output json)
          echo "stack_outputs=$STACK_OUTPUTS" >> $GITHUB_OUTPUT

      - name: Verify deployment
        run: |
          # Verify Lambda function
          aws lambda get-function \
            --function-name ecoscan-api-dev-StatusUpdateFunction-* \
            --region eu-central-1

          # Verify DynamoDB tables
          aws dynamodb describe-table \
            --table-name dev-trash-bins \
            --region eu-central-1

          aws dynamodb describe-table \
            --table-name dev-status-reports \
            --region eu-central-1

          # Verify API Gateway
          aws apigateway get-rest-apis \
            --region eu-central-1 \
            --query "items[?name=='ecoscan-api-dev']"